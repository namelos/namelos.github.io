{"version":3,"sources":["webpack:///path---sicp-3-2-b964f8af6f96d07dd53e.js","webpack:///./.cache/json/sicp-3-2.json"],"names":["webpackJsonp","231","module","exports","data","orga","html","meta","title","date","downloaded","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,y4EAAAC,MAA45EC,MAAA,2BAAAC,KAAA,aAAAC,WAAA,0GAA6KC,aAAgBC,KAAA","file":"path---sicp-3-2-b964f8af6f96d07dd53e.js","sourcesContent":["webpackJsonp([243524056326353],{\n\n/***/ 231:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"orga\":{\"html\":\"<div>We used the substitution model of evaluation to define what is mean by applying a procedure to arguments:</div><blockquote>To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument.</blockquote><div>Once we admit assignment into our programming language, such a definition is no longer adequate. In the presence of assignment, a variable can no longer be consideresd to be merely a name for a value. A variable must somehow designate a \\\"place\\\" in which values can be stored. In our new model of evaluation, these places will be maintained in structures called <i>environments</i>.</div><div>An environment is a sequence of <i>frames</i>. Each frame is a table (possibly empty) of <i>bindings</i>, which associate variable names with their corresponding values. (A single frame may contain at most one binding for any variable.) Each frame has a pointer to its <i>enclosing environment</i>, unless, for the purpose of discussion, the frame is considered to be <i>global</i>. The <i>value of a variable</i> with respect to an environment is the value given by the binding of the variable in the first frame in the environment that contains a binding for that variable. If no frame in the sequence specifies a binding for the variable, then the variable is said to be unbound in the environment.</div><div><figure><img src=\\\"/static/ch3-Z-G-2_2018-10-09_05-11-51-8695046721eaef33e106d07dacb5c249.gif\\\"></figure></div><div>This shows a simple environment structure consisting of three frames, labeled I, II and III. In the diagram, A, B, C and D are pointers to the environments. C and D point to the same environment. The variables <code>z</code> and <code>x</code> are bound in frame II, while y and x are bound in frame I. The value of x in environment D is 3. The value of <code>x</code> in with respect to environment B is also 3. This is determined as follows: We examine the first frame in the sequence (frame III) and do not find a binding for x, so we proceed to the enclosing environment D and find the binding in frame I. On the other hand, the value of <code>x</code> in environment A is 7, because the first frame in the sequence (frame II) contains a binding of <code>x</code> to 7. With respect to environment A, the binding of <code>x</code> to 7 in frame II is said to <i>shadow</i> the binding of <code>x</code> to 3 in frame I.</div>\",\"meta\":{\"title\":\"SICP Chapter 3 Exercises\",\"date\":\"2018-10-09\",\"downloaded\":\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/ch3-Z-G-2.gif @ 2018-10-09 05:11:51\"}}},\"pathContext\":{\"slug\":\"/sicp-3.2/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---sicp-3-2-b964f8af6f96d07dd53e.js","module.exports = {\"data\":{\"orga\":{\"html\":\"<div>We used the substitution model of evaluation to define what is mean by applying a procedure to arguments:</div><blockquote>To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument.</blockquote><div>Once we admit assignment into our programming language, such a definition is no longer adequate. In the presence of assignment, a variable can no longer be consideresd to be merely a name for a value. A variable must somehow designate a \\\"place\\\" in which values can be stored. In our new model of evaluation, these places will be maintained in structures called <i>environments</i>.</div><div>An environment is a sequence of <i>frames</i>. Each frame is a table (possibly empty) of <i>bindings</i>, which associate variable names with their corresponding values. (A single frame may contain at most one binding for any variable.) Each frame has a pointer to its <i>enclosing environment</i>, unless, for the purpose of discussion, the frame is considered to be <i>global</i>. The <i>value of a variable</i> with respect to an environment is the value given by the binding of the variable in the first frame in the environment that contains a binding for that variable. If no frame in the sequence specifies a binding for the variable, then the variable is said to be unbound in the environment.</div><div><figure><img src=\\\"/static/ch3-Z-G-2_2018-10-09_05-11-51-8695046721eaef33e106d07dacb5c249.gif\\\"></figure></div><div>This shows a simple environment structure consisting of three frames, labeled I, II and III. In the diagram, A, B, C and D are pointers to the environments. C and D point to the same environment. The variables <code>z</code> and <code>x</code> are bound in frame II, while y and x are bound in frame I. The value of x in environment D is 3. The value of <code>x</code> in with respect to environment B is also 3. This is determined as follows: We examine the first frame in the sequence (frame III) and do not find a binding for x, so we proceed to the enclosing environment D and find the binding in frame I. On the other hand, the value of <code>x</code> in environment A is 7, because the first frame in the sequence (frame II) contains a binding of <code>x</code> to 7. With respect to environment A, the binding of <code>x</code> to 7 in frame II is said to <i>shadow</i> the binding of <code>x</code> to 3 in frame I.</div>\",\"meta\":{\"title\":\"SICP Chapter 3 Exercises\",\"date\":\"2018-10-09\",\"downloaded\":\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/ch3-Z-G-2.gif @ 2018-10-09 05:11:51\"}}},\"pathContext\":{\"slug\":\"/sicp-3.2/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/sicp-3-2.json\n// module id = 231\n// module chunks = 243524056326353"],"sourceRoot":""}